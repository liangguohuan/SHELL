#!/bin/bash
#===================================================================================================
#
# File: TerminalToggle
#
# Description: 
#   Do you like Guake terminal feture about showing and hiding window quickly when you type F12 ?
#   Gnome terminal can do the same thing, if you bind a key like 'F12' to run this shell script.
#
# Tips: How to bind key to run a shell scirpt ?
#   - step 1: chmod +x TerminalToggle
#   - step 2: open unity-control-center, 
#     keyboard => shortcuts => custom shortcuts => ...
#
# Required:
#   - xdotool, you can install it like ( apt-get install xdotool )
#
# Author: hanson <liangguohaun@gmail.com>
#
# Github: https://github.com/liangguohaun
#
# Last Modified: 2016-11-05 10:10
#
#===================================================================================================

title=" "

terminal=${1:-'gnome-terminal'}
geometry_default=${2:-'133x37+1190+705'}
file=/tmp/terminal_toggle_window
filestate=/tmp/terminal_toggle_window_state
filegeometry=/tmp/terminal_toggle_window_geometry
filefcitxstate=/tmp/terminal_toggle_fcitx_state
statehide='hide'
stateunhide='unhide'
switchfcitx='1'
inputmethod='sogoupinyin'
fcitxstate=$(fcitx-remote)

[[ $switchfcitx == '1' && $fcitxstate == '2' ]] && fcitx-remote -c $inputmethod 

if [[ -f $file ]]  ; then
    winid=`cat $file`
    state=`cat $filestate 2>/dev/null`

    if [[ $state == $stateunhide ]]; then
        state=$statehide
        xdotool windowmap "$winid"
        xdotool windowactivate "$winid"
        eval $( cat "$filegeometry" )
        if [[ $terminal == "roxterm" ]]; then
            Y=$(($Y-28))
        fi
        xdotool windowmove --sync "$winid" $X $Y
        echo $fcitxstate > $filefcitxstate
    else
        if [[ `xdotool getwindowfocus` == "$winid" ]]; then
            [[ $switchfcitx == '1' && $(cat $filefcitxstate) == '2' ]] && fcitx-remote -o $inputmethod 
            state=$stateunhide
            xdotool getwindowgeometry --shell "$winid" > $filegeometry
            xdotool windowunmap "$winid"
        else
            state=$statehide
            xdotool windowactivate "$winid"
        fi
    fi

    # If the window is destroyed manually, reload it
    if [[ $? > 0 ]]; then
        rm $file*
        $0 $* # reload
    fi

    echo $state > $filestate
else 
    "$terminal" --geometry="$geometry_default" --title="$title" &
    xdotool search --sync --onlyvisible --class "$terminal" windowactivate
    wid=`xdotool getactivewindow`
    echo $wid > $file
    sleep 1
    xdotool type 'ms three'
    xdotool key ctrl+m
    # xdotool windowsize "$wid" 100% 100%
    # xdotool key --delay 1000 F11
fi
