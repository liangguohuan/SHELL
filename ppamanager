#!/bin/bash

# Brief:
#   ppamanager is a shell for managing ppa.
#
# QA:
#   why do it?
#   Well, ppa manage get no nice at platform ubuntu. 
#   1. simple handle via ubuntu 'system config'->'software and update'
#   2. A gui ppa manager like 'y-ppa-manager', it' nicy, but often get no response.  
#
# Features:
#   1. show list for ppa
#   2. show info about ppa
#   3. disable ppa
#   4. enable ppa
#   5. purge ppa
#   6. update /etc/apt/sources.list.d/* via goagent

__ScriptVersion="1.0"

PPAHOME="/etc/apt/sources.list.d"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage ()
{
    echo "Usage :  $0 [options] [--] [ppaname]

    Options:
    -l|list       Display ppa list
    -i|info       Display info about ppa
    -e|enable     Enable ppa
    -d|disable    Disable ppa
    -p|purge      purge ppa
    -u|update     update all ppa in /etc/apt/sources.list.d
                 -a update all
                 -o update only via select
    -y            only list the enabled ppa
    -n            only list the disabled ppa
    -a            list all ppa
    -h|help       Display this message
    -v|version    Display script version"

}    # ----------  end of function usage  ----------

function getppaname {
    if [[ -n $(cat "$PPAHOME/$1.list" | sed -n '/launchpad/p') ]]; then
        cat "$PPAHOME/$1.list" | sed -n '1p' | sed 's/\/\///' | awk -F '/' '{print $2,$3}' |tr ' ' '/'
    else
        echo $1
    fi
}

function getteam {
    ppaname=$(getppaname $1)
    echo "$ppaname" | awk -F '/' '{print $1}'
}

function getproject {

    ppaname=$(getppaname $1)
    echo "$ppaname" | awk -F '/' '{print $2}'
}

function getlist {
    list=$(ls "$PPAHOME" | sed 's/.list\(.save\)\?//g'| uniq | sort)
    case $1 in
        a)
            yc=0
            nc=0
            tc=0
            for x in $list ; do
                out=$(cat "$PPAHOME/$x.list" | sed '/^# /d')
                if [[ -n "$out" ]]; then
                    yc=$(expr $yc + 1)
                else
                    nc=$(expr $nc + 1)
                fi
                echo " $x"
                tc=$(expr $tc + 1)
            done
            # echo "$list"
            # tc=$(echo "$list" | wc -l)
            echo -e "\n------ stat -------------------------------"
            echo "All ppa count is: $tc, Enabled count is $yc, Disabled count: $nc"
            ;;
        y)
            yc=0
            tc=0
            for x in $list ; do
                out=$(cat "$PPAHOME/$x.list" | sed '/^# /d')
                if [[ -n "$out" ]]; then
                    echo " $x"
                    yc=$(expr $yc + 1)
                fi
                tc=$(expr $tc + 1)
            done
            echo -e "\n------ stat -------------------------------"
            echo "All ppa count is: $tc, Enabled count is: $yc"
            ;;
        n)
            yc=0
            tc=0
            for x in $list ; do
                out=$(cat "$PPAHOME/$x.list" | sed '/^# /d')
                if [[ -z "$out" ]]; then
                    echo " $x"
                    yc=$(expr $yc + 1)
                fi
                tc=$(expr $tc + 1)
            done
            echo -e "\n------ stat -------------------------------"
            echo "All ppa count is: $tc, Disabled count is: $yc"
            ;;
        *)
            ${FUNCNAME[ 0 ]} a
            ;;
    esac
}

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

[[ -z "$1" ]] && usage && exit 1

while getopts ":hvliedpu" opt
do
  case $opt in

    h|help     )  usage; exit 0   ;;

    v|version  )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;
    
    l|list     )
        tag=
        while getopts ":ayn" optin
        do
            case $optin in
                a) tag=a ;;
                y) tag=y ;;
                n) tag=n ;;
            esac
        done
        out=$(getlist "$tag" | nl | sed -e 's/[0-9]\+\s\+\-/\-/' -e 's/[0-9]\+\s\+All/All/' )
        echo "$out"
        
        ;;

    i|info      )
        tag=
        while getopts ":ayn" optin
        do
            case $optin in
                a) tag=a ;;
                y) tag=y ;;
                n) tag=n ;;
            esac
        done
        PS3='Please enter your choice: '
        options=( $(getlist "$tag" | sed '$d' | sed '$d') )
        select opt in "${options[@]}"
        do
            case $opt in
                *) 
                    break
                    ;;
            esac
        done
        team=$(getteam "$opt")
        project=$(getproject "$opt" | tr '-' '_')
        [[ -n "$project" ]] && project="_$project"
        out=$( sudo find /var/lib/apt/lists/ | grep "${team}${project}" | grep 'Sources\|Packages' | xargs cat )
        infoline='\n------- info ------------------------\n'
        [[ -z "$out" ]] && echo -e "${infoline}Sorry: can not find info file" || echo -e "${infoline}${out}"
        ;;
    e|enable      )
        PS3='Please enter your choice: '
        options=( $(getlist n | sed '$d' | sed '$d') )
        select opt in "${options[@]}"
        do
            case $opt in
                *) 
                    break
                    ;;
            esac
        done
        filename="$PPAHOME/$opt.list"
        # only change the first line in file
        [[ -n "$filename" ]] && sudo sed -i -e '1s/^#\+\s*\(#*\s*\)*//' "$filename"
        # update source.list
        $0 -u
        ;;
    d|disable     )
        PS3='Please enter your choice: '
        options=( $(getlist y | sed '$d' | sed '$d') )
        select opt in "${options[@]}"
        do
            case $opt in
                *) 
                    break
                    ;;
            esac
        done
        filename="$PPAHOME/$opt.list"
        # only change the first line in file
        [[ -n "$filename" ]] && sudo sed -i -e "1s/^/# /" "$filename"
        ;;

    p|purge     )
        PS3='Please enter your choice: '
        options=( $(getlist y | sed '$d' | sed '$d') )
        select opt in "${options[@]}"
        do
            case $opt in
                *) 
                    break
                    ;;
            esac
        done
        ppaname=$(getppaname "$opt")
        if [[ -n $( echo "$ppaname" | grep '/' ) ]]; then
            sudo ppa-purge "ppa:$ppaname"
        else
            echo "Sorry: it won't support, only launchpad.net!"
        fi
        ;;
    
    u|update )
        tag=o
        while getopts ":ao" optin
        do
            case $optin in
                a) tag=a ;;
                o) tag=o ;;
            esac
        done
        if [[ "$tag" == 'o' ]]; then
            PS3='Please enter your choice: '
            options=( $(getlist y | sed '$d' | sed '$d') )
            select opt in "${options[@]}"
            do
                case $opt in
                    *) 
                        break
                        ;;
                esac
            done
            sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/$opt.list" \
                -o Dir::Etc::sourceparts="-" \
                -o APT::Get::List-Cleanup="0"
        else
            sudo apt-get update -o Acquire::http::proxy="http://127.0.0.1:8087/" \
                -o Dir::Etc::sourcelist="-" \
                -o Dir::Etc::sourceparts="/etc/apt/sources.list.d" \
                -o Acquire::https::dl.google.com::Verify-Peer="false"
        fi
        ;;

    * )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))
